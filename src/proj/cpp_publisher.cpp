#include <cstdio>
#include <thread>
#include <chrono>

extern "C" {
#include "dds/dds.h"
#include "demo_Hello.h"   // generated by: idlc -l c
}

int main() {
    // 1) Participant
    dds_entity_t participant = dds_create_participant(DDS_DOMAIN_DEFAULT, nullptr, nullptr);
    if (participant < 0) { fprintf(stderr, "participant: %s\n", dds_strretcode(-participant)); return 1; }

    // 2) Topic for demo::Hello
    dds_entity_t topic = dds_create_topic(participant, &demo_Hello_desc, "demo/Hello", nullptr, nullptr);
    if (topic < 0) { fprintf(stderr, "topic: %s\n", dds_strretcode(-topic)); return 1; }

    // 3) Publisher + Writer (reliable)
    dds_entity_t pub = dds_create_publisher(participant, nullptr, nullptr);
    if (pub < 0) { fprintf(stderr, "publisher: %s\n", dds_strretcode(-pub)); return 1; }

    dds_qos_t* qos = dds_qos_create();
    dds_qset_reliability(qos, DDS_RELIABILITY_RELIABLE, DDS_SECS(5));
    dds_entity_t writer = dds_create_writer(pub, topic, qos, nullptr);
    dds_qos_delete(qos);
    if (writer < 0) { fprintf(stderr, "writer: %s\n", dds_strretcode(-writer)); return 1; }

    // 4) Publish a few samples
    for (int i = 0; i < 10; ++i) {
        demo_Hello s{};
        s.msg = const_cast<char*>("Hello from C++ via Cyclone DDS!");
        dds_return_t rc = dds_write(writer, &s);
        if (rc != DDS_RETCODE_OK) fprintf(stderr, "dds_write: %s\n", dds_strretcode(-rc));
        else printf("[C++] Published: %s\n", s.msg);
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }

    // 5) Cleanup
    dds_delete(participant);
    return 0;
}
