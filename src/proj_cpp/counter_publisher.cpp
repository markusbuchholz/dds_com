#include <cstdio>
#include <thread>
#include <chrono>

extern "C" {
#include "dds/dds.h"
#include "counter.h"   // generated by: idlc -l c counter.idl
}

int main() {
    dds_entity_t participant = dds_create_participant(DDS_DOMAIN_DEFAULT, nullptr, nullptr);
    if (participant < 0) { std::fprintf(stderr, "participant: %s\n", dds_strretcode(-participant)); return 1; }

    // use the descriptor from counter.h
    dds_entity_t topic = dds_create_topic(participant, &demo_Counter_desc, "demo/Counter", nullptr, nullptr);
    if (topic < 0) { std::fprintf(stderr, "topic: %s\n", dds_strretcode(-topic)); return 1; }

    dds_entity_t pub = dds_create_publisher(participant, nullptr, nullptr);
    if (pub < 0) { std::fprintf(stderr, "publisher: %s\n", dds_strretcode(-pub)); return 1; }

    // default QoS (nullptr) to be API-compatible across versions
    dds_entity_t writer = dds_create_writer(pub, topic, nullptr, nullptr);
    if (writer < 0) { std::fprintf(stderr, "writer: %s\n", dds_strretcode(-writer)); return 1; }

    for (int i = 0; ; ++i) {
        demo_Counter s{};       // type from counter.h
        s.value = i;
        dds_return_t rc = dds_write(writer, &s);
        if (rc != DDS_RETCODE_OK) std::fprintf(stderr, "dds_write: %s\n", dds_strretcode(-rc));
        else std::printf("[PUB] %d\n", s.value);
        std::this_thread::sleep_for(std::chrono::milliseconds(200));
    }
    return 0;
}
