#include <cstdio>
#include <cstdlib>
//topic demo/Counter
extern "C" {
#include "dds/dds.h"
#include "counter.h"   // generated by: idlc -l c counter.idl
}

int main() {
    dds_entity_t participant = dds_create_participant(DDS_DOMAIN_DEFAULT, nullptr, nullptr);
    if (participant < 0) { std::fprintf(stderr, "participant: %s\n", dds_strretcode(-participant)); return 1; }

    dds_entity_t topic = dds_create_topic(participant, &demo_Counter_desc, "demo/Counter", nullptr, nullptr);
    if (topic < 0) { std::fprintf(stderr, "topic: %s\n", dds_strretcode(-topic)); return 1; }

    dds_entity_t sub = dds_create_subscriber(participant, nullptr, nullptr);
    if (sub < 0) { std::fprintf(stderr, "subscriber: %s\n", dds_strretcode(-sub)); return 1; }

    dds_entity_t reader = dds_create_reader(sub, topic, nullptr, nullptr);
    if (reader < 0) { std::fprintf(stderr, "reader: %s\n", dds_strretcode(-reader)); return 1; }

    const int MAX_SAMPLES = 8;
    void* samples[MAX_SAMPLES];
    dds_sample_info_t infos[MAX_SAMPLES];
    for (int i = 0; i < MAX_SAMPLES; ++i) samples[i] = std::malloc(sizeof(demo_Counter));

    std::puts("[SUB] waiting on 'demo/Counter' ...");
    while (true) {
        int32_t n = dds_take(reader, samples, infos, MAX_SAMPLES, MAX_SAMPLES);
        if (n < 0) { std::fprintf(stderr, "dds_take: %s\n", dds_strretcode(-n)); break; }
        for (int32_t i = 0; i < n; ++i) {
            if (infos[i].valid_data) {
                auto* s = static_cast<demo_Counter*>(samples[i]);
                std::printf("[SUB] %d\n", s->value);
            }
        }
        dds_sleepfor(DDS_MSECS(50));
    }

    for (int i = 0; i < MAX_SAMPLES; ++i) std::free(samples[i]);
    dds_delete(participant);
    return 0;
}
